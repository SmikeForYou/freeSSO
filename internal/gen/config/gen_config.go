package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
)

var fileName = flag.String("name", "", "Set file name to generate code for config")

type StructInfo struct {
	Name   string
	Target *ast.GenDecl
}

func main() {
	flag.Parse()
	fmt.Println("Env mapper code generator")
	if *fileName == "" {
		fmt.Println("Filename not set. Exiting...")
		return
	}
	fName := *fileName
	fNameOut := fName[:len(fName)-3] + "_env.go"
	fmt.Println(fNameOut)
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, *fileName, nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}
	out, _ := os.Create(fNameOut)
	defer func() { _ = out.Close() }()

	_, _ = fmt.Fprintln(out, `// Code generated by envparser for parsing envs. DO NOT EDIT.`)
	_, _ = fmt.Fprintln(out)
	_, _ = fmt.Fprintln(out, `package `+node.Name.Name)
	_, _ = fmt.Fprintln(out) // empty line
	_, _ = fmt.Fprintln(out, `import "os"`)
	_, _ = fmt.Fprintln(out) // empty line

	//for _, f := range node.Decls {
	//	genD, ok := f.(*ast.GenDecl)
	//	if !ok {
	//		fmt.Printf("SKIP %T is not *ast.GenDecl\n", f)
	//		continue
	//	}
	//	targetStruct := &StructInfo{}
	//	var thisIsStruct bool
	//	for _, spec := range genD.Specs {
	//		currType, ok := spec.(*ast.TypeSpec)
	//		if !ok {
	//			fmt.Printf("SKIP %T is not ast.TypeSpec\n", spec)
	//			continue
	//		}
	//
	//		currStruct, ok := currType.Type.(*ast.StructType)
	//		if !ok {
	//			fmt.Printf("SKIP %T is not ast.StructType\n", currStruct)
	//			continue
	//		}
	//		targetStruct.Name = currType.Name.Name
	//		thisIsStruct = true
	//	}
	//	//Getting comments
	//	var needCodegen bool
	//	var dbeParams string
	//	if thisIsStruct {
	//		for _, comment := range genD.Doc.List {
	//			needCodegen = needCodegen || strings.HasPrefix(comment.Text, "// dbe")
	//			if len(comment.Text) < 7 {
	//				dbeParams = ""
	//			} else {
	//				dbeParams = strings.Replace(comment.Text, "// dbe:", "", 1)
	//			}
	//		}
	//	}
	//	if needCodegen {
	//		targetStruct.Target = genD
	//		genParams := &DbeParam{}
	//		if len(dbeParams) != 0 {
	//			err := json.Unmarshal([]byte(dbeParams), genParams)
	//			if err != nil {
	//				fmt.Printf("Error encoding DBE params for structure %s\n", targetStruct.Name)
	//				continue
	//			}
	//		} else {
	//			genParams.TableName = targetStruct.Name
	//		}
	//
	//		targetStruct.GenParam = genParams
	//		generateMethods(targetStruct, out)
	//	}
	//}
}
